import { NextRequest, NextResponse } from 'next/server';
import { BulkService } from '@/lib/services/bulk-service';
import { AdvancedQueryService, QueryFilter } from '@/lib/services/advanced-query-service';
import { AuthService } from '@/lib/services/auth-service';
import { AppError } from '@/lib/error-handler';
import { createLogger } from '@/lib/logger';

const logger = createLogger('BulkOrdersAPI');

export async function PATCH(req: NextRequest) {
  try {
    // Authenticate and authorize the request
    const user = await AuthService.authenticateRequest(req);
    if (!AuthService.hasPermission(user, ['admin', 'manager', 'sales'])) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 403 });
    }

    // Parse request body
    const { orderIds, status } = await req.json();

    // Validate input
    if (!Array.isArray(orderIds) || orderIds.length === 0 || !status) {
      throw new AppError('Invalid input: orderIds and status are required', 400);
    }

    // Perform bulk order status update
    const result = await BulkService.bulkUpdateOrderStatus(
      orderIds, 
      status, 
      user.id
    );

    logger.info(`Bulk order status updated by user ${user.id}`, { 
      orderCount: orderIds.length, 
      status 
    });

    return NextResponse.json(result);
  } catch (error) {
    logger.error('Bulk order status update failed', error);
    
    if (error instanceof AppError) {
      return NextResponse.json({ error: error.message }, { status: error.statusCode });
    }
    
    return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 });
  }
}

export async function POST(req: NextRequest) {
  try {
    // Authenticate the request
    const user = await AuthService.authenticateRequest(req);

    // Parse request body for complex query
    const { 
      filters = [], 
      sortBy, 
      sortOrder, 
      page, 
      pageSize 
    } = await req.json();

    // Validate and transform filters
    const validatedFilters: QueryFilter[] = filters.map((filter: any) => ({
      field: filter.field,
      operator: filter.operator,
      value: filter.value
    }));

    // Execute complex order query
    const result = await AdvancedQueryService.complexOrderQuery(
      validatedFilters,
      sortBy,
      sortOrder,
      page,
      pageSize
    );

    logger.info(`Complex order query executed by user ${user.id}`, { 
      filterCount: validatedFilters.length,
      resultCount: result.orders.length
    });

    return NextResponse.json(result);
  } catch (error) {
    logger.error('Complex order query failed', error);
    
    if (error instanceof AppError) {
      return NextResponse.json({ error: error.message }, { status: error.statusCode });
    }
    
    return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 });
  }
}

export async function GET(req: NextRequest) {
  try {
    // Authenticate the request
    const user = await AuthService.authenticateRequest(req);

    // Get search params for report generation
    const { searchParams } = new URL(req.url);
    const startDateParam = searchParams.get('startDate');
    const endDateParam = searchParams.get('endDate');

    // Validate input
    if (!startDateParam || !endDateParam) {
      throw new AppError('Start and end dates are required', 400);
    }

    const startDate = new Date(startDateParam);
    const endDate = new Date(endDateParam);

    // Generate order report
    const report = await AdvancedQueryService.generateOrderReport(
      startDate, 
      endDate
    );

    logger.info(`Order report generated by user ${user.id}`, { 
      startDate, 
      endDate, 
      reportSections: report.length 
    });

    return NextResponse.json(report);
  } catch (error) {
    logger.error('Order report generation failed', error);
    
    if (error instanceof AppError) {
      return NextResponse.json({ error: error.message }, { status: error.statusCode });
    }
    
    return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 });
  }
}
